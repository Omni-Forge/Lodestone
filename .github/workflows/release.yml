name: Release
on:
  push:
    branches:
      - release

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  OPENSSL_STATIC: true
  OPENSSL_NO_VENDOR: false
  CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true
  # For cross compilation pkg-config
  PKG_CONFIG_ALLOW_CROSS: 1

jobs:
  release:
    name: Release - ${{ matrix.platform.os-name }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os-name: FreeBSD-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-freebsd
            cross: true
          - os-name: Linux-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            cross: true
          - os-name: Linux-aarch64
            runs-on: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            cross: true
          - os-name: Linux-riscv64
            runs-on: ubuntu-24.04
            target: riscv64gc-unknown-linux-gnu
            cross: true
          - os-name: Windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
          - os-name: macOS-x86_64
            runs-on: macOS-latest
            target: x86_64-apple-darwin
            cross: false

    runs-on: ${{ matrix.platform.runs-on }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install Linux build dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            musl-tools \
            musl-dev \
            gcc-aarch64-linux-gnu \
            gcc-riscv64-linux-gnu \
            pkg-config \
            libssl-dev \
            perl \
            make \
            clang \
            lld

      # Set up musl-cross OpenSSL for Linux targets
      - name: Setup OpenSSL for musl targets
        if: contains(matrix.platform.target, 'musl')
        run: |
          # Install OpenSSL for musl
          wget https://www.openssl.org/source/openssl-3.1.0.tar.gz
          tar xzf openssl-3.1.0.tar.gz
          cd openssl-3.1.0
          
          # Configure and install OpenSSL for musl
          CC="musl-gcc -fPIC" ./Configure no-shared no-async linux-x86_64
          make -j$(nproc)
          sudo make install
          
          # Set OpenSSL env vars
          echo "OPENSSL_DIR=/usr/local/ssl" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/ssl/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          choco install openssl
          echo "OPENSSL_ROOT_DIR=C:/Program Files/OpenSSL-Win64" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=C:/Program Files/OpenSSL-Win64/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=C:/Program Files/OpenSSL-Win64/include" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate Cargo.lock
        run: cargo generate-lockfile

      - name: Set cross-compilation environment
        if: matrix.platform.cross
        run: |
          echo "CC_x86_64_unknown_linux_musl=musl-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_RISCV64GC_UNKNOWN_LINUX_GNU_LINKER=riscv64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_riscv64gc_unknown_linux_gnu=riscv64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--release --locked"
          strip: true
        env:
          OPENSSL_STATIC: true
          OPENSSL_NO_VENDOR: false

      - name: Publish artifacts and release
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: Lodestone
          target: ${{ matrix.platform.target }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
