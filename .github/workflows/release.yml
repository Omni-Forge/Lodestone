name: Release

on:
  push:
    branches: [ "release" ]
  pull_request:
    branches: [ "release" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty to use Cargo.toml version)'
        required: false
        type: string
      skip_version_check:
        description: 'Skip version check'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: "Lodestone"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get latest release version
        id: get_release
        if: ${{ !inputs.skip_version_check }}
        run: |
          latest=$(gh api repos/${{ github.repository }}/releases/latest --jq .tag_name || echo "v0.0.0")
          echo "LATEST_VERSION=${latest#v}" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get current version
        id: get_version
        run: |
          if [ "${{ inputs.version }}" != "" ]; then
            echo "CURRENT_VERSION=${{ inputs.version }}" >> $GITHUB_ENV
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            current=$(grep -m1 'version = "' Cargo.toml | cut -d '"' -f2)
            echo "CURRENT_VERSION=${current}" >> $GITHUB_ENV
            echo "version=${current}" >> $GITHUB_OUTPUT
          fi
          
      - name: Check if release needed
        id: check
        run: |
          if [ "${{ inputs.skip_version_check }}" = "true" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [ "${{ env.CURRENT_VERSION }}" != "${{ env.LATEST_VERSION }}" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: lodestone-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: lodestone-linux-arm64
          # Windows builds  
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: lodestone-windows-amd64.exe
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: lodestone-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: lodestone-darwin-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        if: runner.os == 'Linux' && contains(matrix.target, 'aarch64')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe" "${{ matrix.artifact_name }}"
          else
            cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" "${{ matrix.artifact_name }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
          
  release:
    needs: [check-version, build]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_release == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.check-version.outputs.version }}
        run: |
          # Create release notes from git log
          git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD^)..HEAD --pretty=format:"* %s" > release_notes.txt
          
          # Create the release
          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes-file release_notes.txt \
            ./lodestone-*/lodestone-*
